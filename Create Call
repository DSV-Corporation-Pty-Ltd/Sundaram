<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://live.zwidgets.com/js-sdk/1.1/ZohoEmbededAppSDK.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@7.12.15/dist/sweetalert2.all.min.js"></script>  
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/sweetalert2@7.12.15/dist/sweetalert2.min.css'></link>  


  <title>Schedule a Call</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f5f5f5;
    }

    .form-container {
      background: #fff;
      padding: 20px;
      max-width: 600px;
      margin: auto;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
    }

    h2 {
      text-align: center;
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    .form-group input,
    .form-group select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
    }

    .form-group input[type="datetime-local"] {
      padding-right: 20px;
    }

    .form-actions {
      text-align: right;
    }

    .form-actions button {
      padding: 10px 15px;
      font-size: 14px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .form-actions .cancel-btn {
      background-color: #ddd;
    }

    .form-actions .schedule-btn {
      background-color: #007bff;
      color: white;
    }

    #submit {
      height: 38px;
      padding: 5px 10px;
      font-size: 14px;
    }

    .error {
      border: 2px solid red;
    }

    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <div class="form-container">
    <!-- <h2>Schedule a Call</h2> -->
    <form>
      <div class="form-group">
        <label for="callFor">Call For</label>
        <input type="text" id="callFor" disabled>
      </div>
      <div class="form-group">
        <label for="module" id="module"></label>
        <input type="text" id="recname" disabled>
      </div>
      <!-- <div class="form-group">
              <label for="relatedTo">Related To</label>
              <input type="text" id="relatedTo" placeholder="Account" disabled>
          </div> -->

      <!-- <div class="form-group">
        <label for="callStatus">Outgoing Call Status</label>
        <input type="text" id="callStatus" value="Scheduled" disabled>
      </div> -->
      <div class="form-group">
        <label for="callStartTime">Call Start Time</label>
        <input type="datetime-local" id="callStartTime" class="flatpickr">
      </div>
      <div class="form-group">
        <label for="callType">Call Type</label>
        <select id="callType" required disabled>
          <option value="outbound">Outbound</option>
          <option value="inbound">Inbound</option>
          <option value="missed">Missed</option>
        </select>
      </div>
      <div class="form-group">
        <label for="callStatus">Call Duration</label>
        <input type="text" id="callduration" placeholder="00:00(hours:minutes)" required disabled>
      </div>
      <div class="form-group">
        <label for="callOwner">Call Owner</label>
        <input type="text" id="callOwner" disabled>
      </div>
      <div class="form-group">
        <label for="subject">Subject</label>
        <input type="text" id="subject">
      </div>
      <div class="form-group">
        <div id="reminderContainer" class="hidden">
          <label for="reminder">Reminder</label>
          <select id="reminder">
            <option value="none">None</option>
            <option value="5">5 minutes before</option>
            <option value="10">10 Minutes Before</option>
            <option value="15">15 minutes before</option>
            <option value="30">30 Minutes Before</option>
          </select>

        </div>
        <div class="form-group">
          <h3>Purpose Of Outgoing Call</h3>
        </div>
        <div class="form-group">
          <label for="callPurpose" required>Call Purpose</label>
          <!-- <select id="callPurpose">
            <option value="" disabled selected>-None-</option>
            <option value="Prospecting">Prospecting</option>
            <option value="Administrative">Administrative</option>
            <option value="Negotiation">Negotiation</option>
            <option value="Demo">Demo</option>
            <option value="Project">Project</option>
            <option value="Support">Support</option>
          </select> -->
          <select id="callPurpose"></select>
        </div>
        <div class="form-group">
          <label for="Call Agenda">Call Agenda</label>
          <input type="text" id="Call Agenda">
        </div>
        <div class="form-actions">
          <button type="button" class="cancel-btn" id="cancel">Cancel</button>
          <button type="submit" class="schedule-btn" id="submit">submit</button>
        </div>



    </form>
  </div>
</body>
<script>
  ZOHO.embeddedApp.on("PageLoad", function (data) {
    ZOHO.CRM.UI.Resize({ height: "100%", width: "30%" }).then(function (data) { });
    console.log(data);
    var modulename = data.Entity;
    var recID = data.EntityId[0];

    // Fetch Call_Purpose picklist options dynamically
    ZOHO.CRM.META.getFields({ Entity: "Calls" })
      .then(function (metaResponse) {
        console.log("Fields metadata:", metaResponse); // debug
        const fields = metaResponse.fields;
        const callPurposeField = fields.find(field => field.api_name === "Call_Purpose");

        const callPurposeDropdown = document.getElementById("callPurpose");
        // callPurposeDropdown.innerHTML = `<option value="" disabled selected>-None-</option>`;

        if (callPurposeField && callPurposeField.pick_list_values) {
          callPurposeField.pick_list_values.forEach(option => {
            if (option.actual_value) {
              const opt = document.createElement("option");
              opt.value = option.actual_value;
              opt.textContent = option.display_value;
              callPurposeDropdown.appendChild(opt);
            }
          });
        } else {
          console.warn("Call_Purpose field not found or has no picklist values.");
          callPurposeDropdown.innerHTML = `<option disabled>No options available</option>`;
        }
      })
      .catch(function (err) {
        console.error("Failed to load Call_Purpose options:", err);
      });



    // console.log(recID)
    document.getElementById("callFor").value = modulename || "N/A";
    document.getElementById("module").textContent = modulename || "N/A";
    var formattedDateTime = "";


    const callStartTimeInput = document.getElementById("callStartTime");
    const callTypeSelect = document.getElementById("callType");
    const reminderDropdown = document.getElementById("reminderContainer");

    // Add an event listener to monitor changes to the start time field
    callStartTimeInput.addEventListener("change", function () {
      const callStartTime = new Date(callStartTimeInput.value); // Get the entered start time
      const currentTime = new Date(); // Get the current time

      // Enable or disable the call type field based on the condition
      if (callStartTime < currentTime) {
        document.getElementById("callduration").disabled = false;
        reminderDropdown.classList.add("hidden");
        callTypeSelect.disabled = false; // Enable the field
      } else {
        document.getElementById("callduration").disabled = true;

        reminderDropdown.classList.remove("hidden");
        callTypeSelect.disabled = true; // Keep the field disabled
      }
    });






    var formattedDateTime = "";
    //Get Record Data
    ZOHO.CRM.API.getRecord({
      Entity: modulename, approved: "both", RecordID: recID
    })
      .then(function (data) {
        // console.log(data.data[0].Full_Name)
        recname = data.data[0].Full_Name;
        recowner = data.data[0].Owner.name;
        recownerid = data.data[0].Owner.id;
        // console.log(data.data);
        document.getElementById("recname").value = recname;
        document.getElementById("callOwner").value = recowner;
        document.getElementById("subject").value = "Call scheduled with " + recname;

        if (modulename == "Leads") {

          var now = new Date();
          var year = now.getFullYear();
          var month = String(now.getMonth() + 1).padStart(2, '0'); // Month is zero-based
          var day = String(now.getDate()).padStart(2, '0');
          var hours = String(now.getHours()).padStart(2, '0');
          var minutes = String(now.getMinutes()).padStart(2, '0');

          // Format: YYYY-MM-DDTHH:MM
          var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;

          // Set the value of the datetime-local input
          document.getElementById("callStartTime").value = formattedDateTime;


        }
        else {


          // document.getElementById("relatedTo").value = data.data[0].Account_Name.name;
          var now = new Date();
          var year = now.getFullYear();
          var month = String(now.getMonth() + 1).padStart(2, '0'); // Month is zero-based
          var day = String(now.getDate()).padStart(2, '0');
          var hours = String(now.getHours()).padStart(2, '0');
          var minutes = String(now.getMinutes()).padStart(2, '0');

          // Format: YYYY-MM-DDTHH:MM
          var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;

          // Set the value of the datetime-local input
          var callStartTimeInput = document.getElementById("callStartTime");
          callStartTimeInput.value = formattedDateTime;

          // Set the 'min' attribute to prevent selecting past dates
          callStartTimeInput.min = formattedDateTime;


        }
      })
    //Action on Submit Button
    document.getElementById("submit").addEventListener("click", () => {
      console.log("Submit");

      event.preventDefault(); 
      var now = new Date();
      var year = now.getFullYear();
      var month = String(now.getMonth() + 1).padStart(2, '0'); // Month is zero-based
      var day = String(now.getDate()).padStart(2, '0');
      var hours = String(now.getHours()).padStart(2, '0');
      var minutes = String(now.getMinutes()).padStart(2, '0');

      // Format: YYYY-MM-DDTHH:MM
      var currentdatetimecompare = `${year}-${month}-${day}T${hours}:${minutes}`;
      var CST = document.getElementById("callStartTime").value;
      // console.log(CST);
      console.log(currentdatetimecompare);
      var final_time = CST + ":00+05:30";
      console.log(final_time);

      let datePart = final_time.split("+")[0]; // "2025-01-22T11:00:00"
      let timezoneOffset = "+05:30"; // Extract timezone offset

      let finalDateTime = new Date(final_time);
      reminder = document.getElementById("reminder").value;
      let minutesToSubtract = 0;

      if (reminder === "5 minutes before") {
        minutesToSubtract = 5;
      } else if (reminder === "10 minutes before") {
        minutesToSubtract = 10;
      } else if (reminder === "15 minutes before") {
        minutesToSubtract = 15;
      } else if (reminder === "30 minutes before") {
        minutesToSubtract = 30;
      }

      // Subtract the minutes from the final time
      if (minutesToSubtract > 0) {
        finalDateTime.setMinutes(finalDateTime.getMinutes() - minutesToSubtract);
      }

      // Format the adjusted time as ISO string
      const adjustedDate = finalDateTime.toISOString().split("T")[0]; // "2025-01-22"
      const adjustedTime = finalDateTime.toTimeString().split(" ")[0]; // "10:45:00"
      const adjustedFinalTime = `${adjustedDate}T${adjustedTime}${timezoneOffset}`;

      console.log("Adjusted Time:", adjustedFinalTime);


      if (CST < currentdatetimecompare) {
        const callDuration = document.getElementById("callduration").value.trim();



        if (!callDuration) {
          // alert("Please add call duration as well.");
          swal("Please add call duration as well.");  


        } else {

          const value = callDuration;
          const regex = /^([0-5][0-9]):([0-5][0-9])$/; // Regex for 00:00 format

          if (regex.test(value)) {
            // errorMessage.style.display = "none";
            if (modulename == "Leads") {
              var recordData = {
                "Subject": "Call Logged with " + recname,
                "Call_Agenda": document.getElementById("Call Agenda").value,
                "Call_Purpose": document.getElementById("callPurpose").value,
                "Call_Start_Time": final_time,
                "Call_Type": document.getElementById("callType").value,
                "$se_module": modulename,
                "What_Id": { "name": recname, "id": recID },
                "Owner": recownerid,
                "Call_Duration": document.getElementById("callduration").value
              }
            }
            else {
              var recordData = {
                "Subject": "Call Logged with " + recname,
                "Call_Agenda": document.getElementById("Call Agenda").value,
                "Call_Purpose": document.getElementById("callPurpose").value,
                "Call_Start_Time": final_time,
                "Call_Type": document.getElementById("callType").value,
                "$se_module": modulename,
                "Who_Id": { "name": recname, "id": recID },
                "Owner": recownerid,
                "Call_Duration": document.getElementById("callduration").value
              }
            }


            ZOHO.CRM.API.insertRecord({
              Entity: "Calls",
              APIData: recordData,
              Trigger: ["workflow"]
            })
              .then(function (data) {
                console.log("Insert Record Response:", data);

              })

              swal({  
            title: "Thankyou!",
  text: "Your Call has been Logged Successfully!",
  type: "success",
}); 
            // alert("Call Logged");
            setTimeout(() => {
                    ZOHO.CRM.UI.Popup.closeReload()
                      .then(function (data) {
                        console.log(data);
                      });
                  }, 2300);


            console.log("Call logged.");
          } else {
            alert("Enter Call Duration in HH:MM format");
          }

        }

      }
      else {

        if (modulename == "Leads") {
          var recordData = {
            "Subject": "Call scheduled with " + recname,
            "Call_Agenda": document.getElementById("Call Agenda").value,
            "Call_Purpose": document.getElementById("callPurpose").value,
            "Call_Start_Time": final_time,
            "Call_Type": "Outbound",
            "$se_module": modulename,
            "What_Id": { "name": recname, "id": recID },
            "Owner": recownerid,
            // "Reminder": adjustedTime
          }
        }
        else {
          var recordData = {
            "Subject": "Call scheduled with " + recname,
            "Call_Agenda": document.getElementById("Call Agenda").value,
            "Call_Purpose": document.getElementById("callPurpose").value,
            "Call_Start_Time": final_time,
            "Call_Type": "Outbound",
            "$se_module": modulename,
            "Who_Id": { "name": recname, "id": recID },
            "Owner": recownerid,
            // "Reminder": adjustedTime
          }
        }


        console.log(recordData);

        ZOHO.CRM.API.insertRecord({
          Entity: "Calls",
          APIData: recordData,
          Trigger: ["workflow"]
        })
          .then(function (data) {
            console.log("Insert Record Response:", data);
            if (data.data && data.data[0].status === "success") {
              // alert("Call Scheduled");
              //       ZOHO.CRM.UI.Popup.closeReload()
              // .then(function (data) {
              //   console.log(data);
              // });
            } else {
              console.error("Failed to schedule the call:", data);
              alert("Failed to schedule the call. Check console for details.");
            }
          })
          .catch(function (error) {
            console.error("Error inserting record:", error);
            alert("An error occurred while scheduling the call.");
          });


          swal({  
            title: "Thankyou!",
  text: "Your Call has been scheduled Successfully!",
  type: "success",
}); 
        // alert("Call Scheduled");
        setTimeout(() => {
                    ZOHO.CRM.UI.Popup.closeReload()
                      .then(function (data) {
                        console.log(data);
                      });
                  }, 2300);
      }

    })

    //Close When Cancel button clicked
    document.getElementById("cancel").addEventListener("click", () => {

      ZOHO.CRM.UI.Popup.close()
        .then(function (data) {
          console.log(data)
        })

    })

  })

  ZOHO.embeddedApp.init()
</script>

</html>
